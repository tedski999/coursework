

features
- manually accepted clients
- one header
- subscriber to / unsubscribe from topic
- publish data to topic
- brokers can be clients
- clients can be brokers

dealing with udp
- header has an id (deals with the case that an ACK gets dropped)
- each packet has an index (deals with unordered recieve and single packet drops)


Commands
--------

quit
subscribe   <hostname> <port> <topic>
unsubscribe <hostname> <port> <topic>
publish     <hostname> <port> <topic> <data>

Special Characters
------------------

'\0' - Denotes the end of a section (topic/data)
'\1' - Denotes the end of a CNT
'\2' - Escape character


Requests
--------

Requests start with a 0. The next two bits make up the the instruction. The available
instructions are publish data to topic (PUB), unsubscribe from topic (USB) and subscribe
to topic (SUB). To allow instructions to span multiple sent datagrams, it can be split up
and placed inside multiple continue instructions (CNT). So you could publish "HELLO" to
the "HI" topic using two continue instructions like:
000 00000 00000000 001 "HI" "HE" 00000001    = CNT#0 #0 (PUB HI HE)
000 00000 00000001 "LLO" 00000000 00000000 = CNT#0 #1 (LLO)

Instructions
CNT: 000 <Id> <Index> <Segm.> 00000001
PUB: 001 <Id> <Topic> 00000000 <Data> 00000000
USB: 010 <Id> <Topic> 00000000
SUB: 011 <Id> <Topic> 00000000


Responses
---------

1XX <Id> <Status>

100 <Id> 00000000

<Status>
00000000 OK
10000000 Timeout
10000001 Unauthorized


Responses start with a 1. The next two bits make up the instruction being responded to.
The next bit is set if an error occured. The final two bits define the message/error
being returned.

All
1XX100 [ERR Timeout / Fatal, resend all]
1XX101 [ERR Unauthorized source]

CNT
(((TODO))) - how can we send multiple CNT without ACK being sent for each?
100000 [ACK CNT Continue received, send next segment]
100001 [ACK CNT Continue concluded]
100010 [reserved]
100011 [reserved]
100110 [ERR CNT Resend segment]
100111 [reserved]

((TODO)) - abstract CNT from instructions below

PUB
101000 [ACK Send topic]
101001 [CNT Segment received, continue]
101010 [DTA Topic received, send data]
101011 [FIN Data received]
101110 [ERR Resend segment]
101111 [reserved]

USB / SUB
11X000 [ACK Send topic]
11X001 [CNT Segment received, continue]
11X010 [FIN Topic received, successfully (un)subscribed]
11X011 [reserved]
11X110 [ERR Resend segment]
11X111 [reserved]


Example
-------

Here is an example of c failing to complete a request
c > b - 001 01001000010100100000000 = PUB "HI"
c < b - 101 000                     = ACK PUB Send topic
c < b - 101 010                     = ACK PUB Send data
...Some time later...
c < b - 101 100                     = ERR PUB Timeout

This is c subscribing to "HI" in one packet
c > b - 011 01001000010100100000000 = SUB "HI"
c < b - 111 000                     = ACK SUB Send topic
c < b - 111 010                     = ACK SUB Subscribed
Note if c had missed just one of those final 0 bits, b would have eventually responded
with a timeout (the request was never completed).

Now c is going to publish some data over several packets and two segments
c > b - 001                         = PUB
c < b - 101 000                     = ACK PUB Send topic
c > b - 01001000010100100000000     = "HI"
c < b - 101 010                     = ACK PUB Send data
c > b - ....                        = "HELL
c < b - 101 001                     = ACK PUB Continue
c > b - 0100011100000000            = O"
c < b - 101 011                     = ACK PUB Data published

At this point, b is now going to publish the data from c to all of the "HI" subscribers
(in this case, that's just c).
c < b - 001 01001000010100100000000 ... = PUB "HI" "HELLO"
c > b - 101 000                     = ACK PUB Send topic
c > b - 101 000                     = ACK PUB Send data
c > b - 101 011                     = ACK PUB Data published

